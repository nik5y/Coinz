

SCHEDULE:


fun scheduleInit() {
        //SCHEDULE

        val scheduledExecutorService : ScheduledExecutorService = Executors.newScheduledThreadPool(1)
        val now = OffsetDateTime.now(ZoneOffset.UTC)

        val today = now.toLocalDate()
        val tomorrow = today.plusDays(1)

        val tomorrowStart = OffsetDateTime.of(
                tomorrow,
                LocalTime.MIN,
                ZoneOffset.UTC
        )

        val d = Duration.between(now, tomorrowStart)
        val millisUntilTomorrowStart = d.toMillis()

        val sixam = getHoursUntilTarget(2)
        //scheduledExecutorService.schedule(dailyUpdate(), 0, TimeUnit.SECONDS)

        //scheduledExecutorService.shutdown()

        //scheduledExecutorService.scheduleAtFixedRate(dailyUpdate(), millisUntilTomorrowStart,  TimeUnit.DAYS.toMillis( 1 ) ,  TimeUnit.MILLISECONDS  )

        Timer("Deleting Coins", false).schedule(millisUntilTomorrowStart) {
            deletettt()
        }

    }


ANDROID-JOB:

for the class:

package uk.ac.ed.inf.coinz

import android.app.Application
import android.os.Bundle
import com.evernote.android.job.JobManager
import android.support.annotation.NonNull
import com.evernote.android.job.Job
import com.evernote.android.job.JobCreator
import com.evernote.android.job.JobRequest
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.evernote.android.job.DailyJob.schedule
import android.support.v4.app.NotificationManagerCompat
import android.content.Intent
import android.app.PendingIntent
import java.time.Duration
import java.time.LocalTime
import java.time.OffsetDateTime
import java.time.ZoneOffset


class App : Application() {

    override fun onCreate() {
        super.onCreate()
        JobManager.create(this).addJobCreator(DemoJobCreator())
        ShowNotificationJob.scheduleExact()
    }

}

class DemoJobCreator : JobCreator {

        override fun create(tag: String): Job? {
            when (tag) {
                ShowNotificationJob.TAG -> return ShowNotificationJob()
                else -> return null
            }
        }
    }


/*
class DemoSyncJob : Job() {


    override fun onRunJob(params: Job.Params): Job.Result {
        // run your job here
        val firestore = FirebaseFirestore.getInstance()
        val email = FirebaseAuth.getInstance().currentUser!!.email.toString()

        //remove todaysbanked
        firestore.collection("Users").document(email).collection("Coins").document("Collected Coins").delete()

        return Job.Result.SUCCESS
    }

    companion object {

        val TAG = "job_demo_tag"

        fun scheduleExactJob() {
            JobRequest.Builder(DemoSyncJob.TAG)
                    .setExact(100)
                    .build()
                    .schedule()
        }
    }
}*/

class ShowNotificationJob : Job() {

    override fun onRunJob(params: Job.Params): Job.Result {

        val firestore = FirebaseFirestore.getInstance()
        val email = FirebaseAuth.getInstance().currentUser!!.email.toString()

        //remove todaysbanked
        firestore.collection("Users").document(email).collection("Coins").document("Collected Coins").delete()

        return Job.Result.SUCCESS
    }

    companion object {

        val TAG = "show_notification_job_tag"

        fun scheduleExact() {
            val now = OffsetDateTime.now(ZoneOffset.UTC)

            val today = now.toLocalDate()
            val tomorrow = today.plusDays(1)

            val tomorrowStart = OffsetDateTime.of(
                    tomorrow,
                    LocalTime.MIN,
                    ZoneOffset.UTC
            )

            val d = Duration.between(now, tomorrowStart)
            val millisUntilTomorrowStart = d.toMillis()

            JobRequest.Builder(ShowNotificationJob.TAG)
                    .setExact(5000)
                    .build()
                    .schedule()
        }
    }
}


for the activity:

////JobManager.create(applicationContext).addJobCreator(DemoJobCreator())

        //ShowNotificationJob.scheduleExact()



HOURS TILL INT:

private fun getHoursUntilTarget(targetHour: Long): Long {
        val calendar = Calendar.getInstance()
        val hour = calendar.get(Calendar.HOUR_OF_DAY)
            return if (hour < targetHour) targetHour - hour else targetHour - hour + 24
    }

//DAILY UPDATE RUNNABLE FOR SCHEDULE EXECUTOR :

class dailyUpdate() : Runnable {
    override fun run() {

        //Remove coins from todaysbanked, todayssent; Set bonus features to false.

        /*var currValMap : MutableMap<String,String> = mutableMapOf<String,String>()
        val coinMap : MutableMap<String,Any> = mutableMapOf()

        currValMap.put("kek","check")
        coinMap.put("boob", currValMap)*/

        val firestore = FirebaseFirestore.getInstance()
        val email = FirebaseAuth.getInstance().currentUser!!.email.toString()

        //remove todaysbanked
        firestore.collection("Users").document(email).collection("Coins").document("Collected Coins").delete()

        //remove todayssent
        firestore.collection("Users").document(email).collection("Coins").document("Sent Coins Today").delete()

        //set bonus features to false
        firestore.collection("Users").document(email).collection("Bonuses").document("Coin Currency").update("activated", false)
        firestore.collection("Users").document(email).collection("Bonuses").document("Coin Value").update("activated", false)
        firestore.collection("Users").document(email).collection("Bonuses").document("Rates").update("activated", false)

    }
}

/////// MAPS TOOLBAR//////

<android.support.v7.widget.Toolbar
        android:id="@+id/toolbar"
        android:layout_width="match_parent"
        android:layout_height="50dp"
        android:background="@color/colorPrimary"
        android:elevation="4dp"
        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
        mapbox:layout_constraintEnd_toEndOf="parent"
        mapbox:layout_constraintStart_toStartOf="parent"
        mapbox:layout_constraintTop_toTopOf="parent"
        mapbox:popupTheme="@style/ThemeOverlay.AppCompat.Light" />


////////TIMER/////////

 fun reCreateMapTimer() {

        val millisUntilTomorrowStart = Timing().millisUntilTomorrowStart()

        Timer("Deleting Coins", false).schedule(millisUntilTomorrowStart + 1000 * 60) {
            Log.d(tag, "ReCreating Maps for new Coins")

            //reset bonuses?

            //Restart Banked Coin Counter:

            val path = firestore.collection("Users").document(userEmail!!)

            path.collection("Account Information").document("Coin Counter")
                    .get().addOnSuccessListener{count->
                        path.collection("Account Information").document("Coin Counter")
                                .set(CoinCounter())
                    }.addOnCompleteListener {
                        Log.d("Alarm", "Coin Counter Restarted")
                    }.addOnFailureListener {
                        Log.d("Alarm", "Coin Counter NOT Restarted")
                    }


            //Reset Bonus For map:

            path.collection("Bonuses").document("Coin Currency").update("activated", false)
            path.collection("Bonuses").document("Coin Value").update("activated", false)
            path.collection("Bonuses").document("Rates").update("activated", false)

            //coin delete in case the user clicks on a coin after midnight but before the alarm has time to delete the coins.
            //as this method restarts the activity, the alarm would also get reset, thus not deleting the coins as needed.

            path.collection("Coins").document("Sent Coins Today").delete().addOnCompleteListener {
                Log.d("Alarm", "Sent Coins Today Deleted")
            }.addOnFailureListener {
                Log.d("Alarm", "Sent Coins Today NOT Deleted")
            }

            path.collection("Coins").document("Banked Coins Today").delete().addOnCompleteListener {
                Log.d("Alarm", "Banked Coins Today Deleted")
            }.addOnFailureListener {
                Log.d("Alarm", "Banked Coins Today NOT Deleted")
            }

            goToMaps()

        }

    }


    /////////LEADERBOARD FRAGMENT////////
    package uk.ac.ed.inf.coinz

    import android.annotation.SuppressLint
    import android.os.Bundle
    import android.support.v4.app.Fragment
    import android.support.v7.widget.LinearLayoutManager
    import android.support.v7.widget.RecyclerView
    import android.view.LayoutInflater
    import android.view.View
    import android.view.ViewGroup
    import android.widget.LinearLayout
    import com.google.firebase.auth.FirebaseAuth
    import com.google.firebase.firestore.FirebaseFirestore
    import com.xwray.groupie.GroupAdapter
    import com.xwray.groupie.ViewHolder
    import kotlinx.android.synthetic.main.activity_interactive.*
    import kotlinx.android.synthetic.main.fragment_leaderboard.*


    class LeaderboardFragment : Fragment() {

        val firestore = FirebaseFirestore.getInstance()
        val email = FirebaseAuth.getInstance().currentUser!!.email.toString()
        val leaderboardAdapter = GroupAdapter<ViewHolder>()
        var emailss = arrayListOf<String>("t1@t1.com", "t2@t2.com")

        @SuppressLint("ResourceType")
        override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
            val view = inflater.inflate( R.layout.fragment_leaderboard, container, false )


            val recyc = view.findViewById<RecyclerView>(R.id.leaderboard_recycler) as RecyclerView

            recyc.layoutManager = LinearLayoutManager(activity, LinearLayout.VERTICAL, false)


            getAdapter(object : MyCallback {

                override fun onCallback(value: GroupAdapter<ViewHolder>) {
                    recyc.adapter = value
                }
            })



            return view
        }


        override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
            super.onViewCreated(view, savedInstanceState)


        }

        interface MyCallback {
            fun onCallback(value: GroupAdapter<ViewHolder>)
        }

        private fun getAdapter(callback: MyCallback) {


               for (user in emailss) {

                    firestore.collection("Users").document("t1@t1.com").collection("Account Information")
                            .document("Personal Details").get().addOnSuccessListener { details->

                                val username = details["username"] as String
                                val pictureURL = details["pictureURL"] as String
                                leaderboardAdapter.add(LeaderboardUserItem(User(username,pictureURL)))
                                callback.onCallback(leaderboardAdapter)
                            }

               }



            }



        /*private fun getEmails(callback: MyCallback) {
            val emails = arrayListOf<String>()
            firestore.collection("Users").get().addOnSuccessListener { users ->

                for (user in users) {
                    val userEmail = user.id
                    emails.add(userEmail)
                }
            }
            callback.onCallbackEmails(emails)
        }*/

    }





